{"version":3,"sources":["webpack:///./src/app/login/payment-service.service.ts","webpack:///./src/app/shared/service/usuario/usuario.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { AngularFireAuth } from 'angularfire2/auth';\n\nimport { switchMap, tap, take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentServiceService {\n\n  userId: string;\n  plan: string;\n  membership: any;\n\n  constructor(private db: AngularFireDatabase, private afAuth: AngularFireAuth) {\n    this.membership = this.afAuth.authState\n      .pipe(\n        tap(user => this.userId = user.uid),\n        switchMap(user => {\n          return (this.db.object(`users/${user.uid}/pro-membership`)).valueChanges();\n        })\n      );\n  }\n\n\n\n  processPayment(token: any, uid: string, lang: string) {\n    this.userId = uid;\n\n  if (lang === 'pt-BR') {\n    this.plan = 'plan_EtApG9sgJaXnnW';\n  } else if (lang === 'pt' || lang === 'de' || lang === 'es' || lang === 'fr' || lang === 'it') {\n    this.plan = 'plan_EtAn2S0vVAAgn7';\n  } else {\n    this.plan = 'plan_EtAkL5tX4sQYCs';\n  }\n    return this.db.object(`/users/${this.userId}/pro-membership`).update({ token: token.id, plan: this.plan});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { RequestOptions, RequestMethod, Headers, Http } from '@angular/http';\nimport { map } from 'rxjs/operators';\nimport { FormGroup } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AngularFireDatabase } from 'angularfire2/database';\n\n\nimport { Usuario } from './usuario.model';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsuarioService {\n\n  private readonly API = `${environment.API}usuarios`;\n  private PATH = 'emails/';\n\n\n  constructor(\n    private httpclient: HttpClient,\n    private http: Http,\n    private router: Router,\n    private db: AngularFireDatabase\n  ) {\n\n  }\n\n  getListaUsuarios() {\n\n    //  this.db.object<Usuario[]>(this.PATH).valueChanges().subscribe(console.log);\n    //  this.httpclient.get<Usuario[]>(this.API).subscribe(console.log);\n\n    return this.httpclient.get<Usuario[]>(this.API);\n\n  }\n\n\n\n  postEmail(email: FormGroup) {\n    return new Promise((resolve) => {\n      this.db.list(this.PATH)\n        .push({\n          a_email: (email.get('yourEmail').value).toString(),\n          b_nome: (email.get('yourName').value).toString(),\n          c_assunto: (email.get('assunto').value).toString(),\n          d_message: (email.get('message').value).toString(),\n        });\n    });\n  }\n\n\n  /*\n    postUsuario(formulario: FormGroup) {\n      const body = JSON.stringify(formulario.value);\n      const headerOptions = new Headers({ 'Content-Type': 'application/json' });\n      const requestOptions = new RequestOptions({ method: RequestMethod.Post, headers: headerOptions });\n      return this.http.post(this.API, body, requestOptions).pipe(map(x => x.json()));\n    }*/\n\n\n}\n"],"sourceRoot":""}